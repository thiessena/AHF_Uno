import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class GameTest {
    private Game game;

    @Before
    public void setUp() {
        String[] playerNames = {"Player1", "Player2"};
        game = new Game(playerNames);
    }

    @Test
    public void testCheckWin() {
        assertFalse(game.checkWin());

        Player player1 = game.getPlayers().get(0);
        player1.getHand().clear();
        assertTrue(game.checkWin());

        Player player2 = game.getPlayers().get(1);
        player2.getHand().clear();
        assertTrue(game.checkWin());
    }

    @Test
    public void testIsValidMove() {
        Card currentCard = new Card("Red", "5");
        game.setCurrentCard(currentCard);

        Card validCard1 = new Card("Red", "7");
        assertTrue(game.isValidMove(validCard1));

        Card validCard2 = new Card("Blue", "5");
        assertTrue(game.isValidMove(validCard2));

        Card invalidCard = new Card("Green", "2");
        assertFalse(game.isValidMove(invalidCard));
    }

    @Test
    public void testHandleSpecialCard_Skip() {
        game.setCurrentPlayerIndex(0);

        Card skipCard = new Card("Red", "Skip");
        game.handleSpecialCard(skipCard);

        assertEquals(1, game.getCurrentPlayerIndex());
    }

    @Test
    public void testHandleSpecialCard_Reverse() {
        game.setCurrentPlayerIndex(0);

        Card reverseCard = new Card("Red", "Reverse");
        game.handleSpecialCard(reverseCard);

        assertEquals(1, game.getCurrentPlayerIndex());

        game.handleSpecialCard(reverseCard);

        assertEquals(0, game.getCurrentPlayerIndex());
    }

    @Test
    public void testHandleSpecialCard_DrawTwo() {
        game.setCurrentPlayerIndex(0);

        Deck drawPile = game.getDrawPile();
        int initialDrawPileSize = drawPile.getSize();

        Player nextPlayer = game.getNextPlayer();
        int initialNextPlayerHandSize = nextPlayer.getHandSize();

        Card drawTwoCard = new Card("Red", "Draw Two");
        game.handleSpecialCard(drawTwoCard);

        assertEquals(initialDrawPileSize - 2, drawPile.getSize());
        assertEquals(initialNextPlayerHandSize + 2, nextPlayer.getHandSize());
    }

    @Test
    public void testChangePlayer() {
        game.setCurrentPlayerIndex(0);

        game.changePlayer();
        assertEquals(1, game.getCurrentPlayerIndex());

        game.changePlayer();
        assertEquals(0, game.getCurrentPlayerIndex());
    }

    @Test
    public void testGetNextPlayer() {
        game.setCurrentPlayerIndex(0);

        Player nextPlayer1 = game.getNextPlayer();
        assertEquals(1, game.getPlayers().indexOf(nextPlayer1));

        game.setReverse(true);

        Player nextPlayer2 = game.getNextPlayer();
        assertEquals(0, game.getPlayers().indexOf(nextPlayer2));
    }

    @Test
    public void testStart() {
        String[] playerNames = {"Player1", "Player2"};
        InputStream inputStream = new ByteArrayInputStream("1".getBytes());
        System.setIn(inputStream);

        Game game = new Game(playerNames);
        game.start();

        // Assert expected behavior
    }
}
